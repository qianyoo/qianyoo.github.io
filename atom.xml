<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅言</title>
  
  <subtitle>浅言的随记.</subtitle>
  <link href="https://qianyoo.github.io/atom.xml" rel="self"/>
  
  <link href="https://qianyoo.github.io/"/>
  <updated>2022-12-13T14:40:23.964Z</updated>
  <id>https://qianyoo.github.io/</id>
  
  <author>
    <name>浅言</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA 远程debug</title>
    <link href="https://qianyoo.github.io/2021/09/10/IDEA%20%E8%BF%9C%E7%A8%8Bdebug/"/>
    <id>https://qianyoo.github.io/2021/09/10/IDEA%20%E8%BF%9C%E7%A8%8Bdebug/</id>
    <published>2021-09-10T01:21:00.000Z</published>
    <updated>2022-12-13T14:40:23.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-远程debug模式使用记录"><a href="#IDEA-远程debug模式使用记录" class="headerlink" title="IDEA 远程debug模式使用记录"></a>IDEA 远程debug模式使用记录</h1><blockquote><p> jar包启动时添加启动参数    端口号 8888为自己设置的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888 2333.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><h3 id="IDEA具体配置如下图"><a href="#IDEA具体配置如下图" class="headerlink" title="IDEA具体配置如下图"></a>IDEA具体配置如下图</h3><p><img src="http://file.md.zhiqianyan.top//image-20210901144540152.png" alt="image-20210901144540152"></p><blockquote><p>调试模式启动这个debug</p><p> 其他的就和正常debug一样的</p></blockquote><blockquote><p>参数解释：</p><ol><li><p>JAVA支持调试功能，并提供了一个简单的调试工具JDB，其可支持设置断点及线程级的调试；</p></li><li><p>各参数解释：</p></li></ol><p>  -Xdebug是通知JVM工作在DEBUG模式下</p><p>  -Xrunjdwp是通知JVM使用(java debug wire protocol)来运行调试环境。该参数同时了一系列的调试选项：</p><p>  <em>transport指定了调试数据的传送方式，dt_socket是指用SOCKET模式，另有dt_shmem指用共享内存方式，其中，dt_shmem只适用于Windows平台。<br>  server参数是指是否支持在server模式的VM中.<br>  onthrow指明，当产生该类型的Exception时，JVM就会中断下来，进行调式。该参数可选。<br>  launch指明，当JVM被中断下来时，执行的可执行程序。该参数可选<br>  suspend指明，是否在调试客户端建立起来后，再执行JVM。<br>  onuncaught(=y或n)指明出现uncaught exception 后，是否中断JVM的执行.</em></p></blockquote><blockquote><p>参考博客: <a href="https://www.cnblogs.com/suntingme/p/7591350.html">https://www.cnblogs.com/suntingme/p/7591350.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA-远程debug模式使用记录&quot;&gt;&lt;a href=&quot;#IDEA-远程debug模式使用记录&quot; class=&quot;headerlink&quot; title=&quot;IDEA 远程debug模式使用记录&quot;&gt;&lt;/a&gt;IDEA 远程debug模式使用记录&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    
    <category term="IDEA" scheme="https://qianyoo.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析 MyBatis 核心原理 学习笔记</title>
    <link href="https://qianyoo.github.io/2021/03/10/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%20MyBatis%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://qianyoo.github.io/2021/03/10/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%20MyBatis%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-10T06:29:30.856Z</published>
    <updated>2021-03-10T06:37:39.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入剖析-MyBatis-核心原理-学习笔记"><a href="#深入剖析-MyBatis-核心原理-学习笔记" class="headerlink" title="深入剖析 MyBatis 核心原理 学习笔记"></a><strong>深入剖析 MyBatis 核心原理</strong> 学习笔记</h1><h2 id="MyBatis-架构简介"><a href="#MyBatis-架构简介" class="headerlink" title="MyBatis 架构简介"></a>MyBatis 架构简介</h2><p>MyBatis分为三层架构，分别是基础支撑层、核心处理层和接口层，如下图所示</p><p><img src="https://s0.lgstatic.com/i/image2/M01/0B/1B/CgpVE2AT9G2AXu4RAAM4svUMBPc909.png" alt="MyBatis 三层架构图"></p><h3 id="基础支撑层"><a href="#基础支撑层" class="headerlink" title="基础支撑层"></a>基础支撑层</h3><p>基础支撑层是整个MyBatis框架的地基，为整个MyBatis框架提供了非常基础的功能，其中每个模块都提供了一个内聚的、单一的能力，MyBatis基础支撑层按照这些单一功能可以划分为上图中的九个基础模块。</p><h4 id="1、类型转换模块"><a href="#1、类型转换模块" class="headerlink" title="1、类型转换模块"></a>1、类型转换模块</h4><p>mybatis-config.xml（MyBatis配置文件）中通过 <code>&lt;typeAliase&gt;</code> 标签为一个类定义一个别名，这里用到的“别名机制”就是由MyBatis基础支撑层中的类型转换模块实现的。</p><blockquote><p>以下是 mybatis-config.xml 配置文件的示例</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2333--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span> <span class="comment">&lt;!-- 定义属性值 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span><span class="comment">&lt;!-- 全局配置信息 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置别名信息，在映射配置文件中可以直接使用Customer这个别名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            代替org.example.domain.Customer这个类 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.domain.Customer&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Customer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.domain.Address&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.domain.Order&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Order&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.domain.OrderItem&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;OrderItem&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.domain.Product&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Product&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务管理器的类型 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源的类型，以及数据库连接的相关信息 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射配置文件的位置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/AddressMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/OrderItemMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/ProductMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了“别名转换”机制，类选转换模块还实现了Mybatis中JDBC类型与Java类型之间的相互转换，这一功能在绑定实参、映射ResultSet场景中都有体现：</p><ul><li>在sql模板绑定用户传入实参的场景中，类型转换模块会将 Java 类型数据转换成 JDBC 类型数据；</li><li>在将 ResultSet 映射成结果对象的时候，类型转换模块会将 JDBC 类型数据转换成 Java 类型数据</li></ul><p>具体情况如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/0B/19/Cip5yGAT9HeAabOAAACw3SAaflI907.png" alt="类型转换基本功能示意图"></p><h4 id="2、日志模块"><a href="#2、日志模块" class="headerlink" title="2、日志模块"></a>2、日志模块</h4><p>日志是我们生产实践中排查问题、定位 Bug、锁定性能瓶颈的主要线索来源，在任何一个成熟系统中都会有级别合理、信息翔实的日志模块，MyBatis 也不例外。MyBatis 提供了日志模块来集成 Java 生态中的第三方日志框架，该模块目前可以集成 Log4j、Log4j2、slf4j 等优秀的日志框架。</p><h4 id="3、反射工具模块"><a href="#3、反射工具模块" class="headerlink" title="3、反射工具模块"></a>3、反射工具模块</h4><p>Java 中的反射功能非常强大，许多开源框架都会依赖反射实现一些相对灵活的需求，但是大多数 Java 程序员在实际工作中很少会直接使用到反射技术。MyBatis 的反射工具箱是在 Java 反射的基础之上进行的一层封装，为上层使用方提供更加灵活、方便的 API 接口，同时缓存 Java 的原生反射相关的元数据，提升了反射代码执行的效率，优化了反射操作的性能。</p><h4 id="4、Binding-模块"><a href="#4、Binding-模块" class="headerlink" title="4、Binding 模块"></a>4、<strong>Binding 模块</strong></h4><p>可以通过 SqlSession 获取 Mapper 接口的代理，然后通过这个代理执行关联 Mapper.xml 文件中的数据库操作。通过这种方式，可以将一些错误提前到编译期，该功能就是通过 Binding 模块完成的。</p><p>这里特别说明的是，在使用 MyBatis 的时候，我们无须编写 Mapper 接口的具体实现，而是利用 Binding 模块自动生成 Mapper 接口的动态代理对象。有些简单的数据操作，我们还可以直接在 Mapper 接口中使用注解完成，连 Mapper.xml 配置文件都无须编写，但如果 ResultSet 映射以及动态 SQL 非常复杂，还是建议在 Mapper.xml 配置文件中维护会比较方便。</p><h4 id="5、数据源模块"><a href="#5、数据源模块" class="headerlink" title="5、数据源模块"></a>5、数据源模块</h4><p>持久层框架核心组件之一就是数据源，一款性能出众的数据源可以成倍提升系统的性能。MyBatis 自身提供了一套不错的数据源实现，也是 MyBatis 的默认实现。另外，在 Java 生态中，就有很多优异开源的数据源可供选择，MyBatis 的数据源模块中也提供了与第三方数据源集成的相关接口，这也为用户提供了更多的选择空间，提升了数据源切换的灵活性。</p><h4 id="6、缓存模块"><a href="#6、缓存模块" class="headerlink" title="6、缓存模块"></a>6、<strong>缓存模块</strong></h4><p>数据库是实践生成中非常核心的存储，很多业务数据都会落地到数据库，所以数据库性能的优劣直接影响了上层业务系统的优劣。我们很多线上业务都是读多写少的场景，在数据库遇到瓶颈时，缓存是最有效、最常用的手段之一（如下图所示），正确使用缓存可以将一部分数据库请求拦截在缓存这一层，这就能够减少一部分数据库的压力，提高系统性能。</p><p><img src="https://s0.lgstatic.com/i/image2/M01/0B/19/Cip5yGAT9ICAItLcAAHSeuL0ugo137.png" alt="缓存模块结构图"></p><p>除了使用 Redis、Memcached 等外置的第三方缓存以外，持久化框架一般也会自带内置的缓存，例如，MyBatis 就提供了一级缓存和二级缓存，具体实现位于基础支撑层的缓存模块中。</p><h4 id="7、解析器模块"><a href="#7、解析器模块" class="headerlink" title="7、解析器模块"></a>7、<strong>解析器模块</strong></h4><p>MyBatis 中有两大部分配置文件需要解析，一个是 mybatis-config.xml 配置文件，另一个是 Mapper.xml 配置文件。这两个文件都是由 MyBatis 的解析器模块进行解析的，其中主要是依赖 XPath 实现 XML 配置文件以及各类表达式的高效解析。</p><h4 id="8、事务管理模块"><a href="#8、事务管理模块" class="headerlink" title="8、事务管理模块"></a>8、<strong>事务管理模块</strong></h4><p>持久层框架一般都会提供一套事务管理机制实现数据库的事务控制，MyBatis 对数据库中的事务进行了一层简单的抽象，提供了简单易用的事务接口和实现。一般情况下，Java 项目都会集成 Spring，并由 Spring 框架管理事务。在后面的课程中，我还会深入讲解 MyBatis 与 Spring 集成的原理，其中就包括事务管理相关的集成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入剖析-MyBatis-核心原理-学习笔记&quot;&gt;&lt;a href=&quot;#深入剖析-MyBatis-核心原理-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;深入剖析 MyBatis 核心原理 学习笔记&quot;&gt;&lt;/a&gt;&lt;strong&gt;深入剖析 MyBatis</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>List集合</title>
    <link href="https://qianyoo.github.io/2021/03/10/List%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://qianyoo.github.io/2021/03/10/List%E9%9B%86%E5%90%88%E7%B1%BB/</id>
    <published>2021-03-10T03:26:00.000Z</published>
    <updated>2022-12-13T14:28:01.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p><strong>线程安全</strong>就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。</p><p><strong>线程不安全</strong>就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线程安全问题&quot;&gt;&lt;a href=&quot;#线程安全问题&quot; class=&quot;headerlink&quot; title=&quot;线程安全问题&quot;&gt;&lt;/a&gt;线程安全问题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;线程安全&lt;/strong&gt;就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，</summary>
      
    
    
    
    
    <category term="Java" scheme="https://qianyoo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String类型中 &quot;==&quot;和&quot;equals&quot;比较的差别</title>
    <link href="https://qianyoo.github.io/2021/03/03/String%E7%B1%BB%E5%9E%8B%E4%B8%AD%20==%E5%92%8Cequals%E6%AF%94%E8%BE%83%E7%9A%84%E5%B7%AE%E5%88%AB/"/>
    <id>https://qianyoo.github.io/2021/03/03/String%E7%B1%BB%E5%9E%8B%E4%B8%AD%20==%E5%92%8Cequals%E6%AF%94%E8%BE%83%E7%9A%84%E5%B7%AE%E5%88%AB/</id>
    <published>2021-03-03T08:43:31.757Z</published>
    <updated>2021-03-03T08:15:15.343Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>先说明一下String类型的变量的创建方式</p><p>在创建新的String类型的变量时,首先会在缓冲区查找是否有这个产量对应的对象,有就直接将找到的对象的地址赋给新创建的变量,没有就重新创建一个对象,然后赋给新创建的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;str&quot;</span>;<span class="comment">//创建一个新的String类型的变量,在已有的缓冲区中没有就重新创建一个</span></span><br><span class="line">String str1 = <span class="string">&quot;str&quot;</span>;<span class="comment">//创建时在缓冲区发现有和即将创建的值一样的对象,就将str的地址赋给str1</span></span><br><span class="line">str == str1;<span class="comment">//true</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;str&quot;</span>);<span class="comment">//强制创建一个对象str2,地址和str,str1不同</span></span><br><span class="line">str2 == str;<span class="comment">//false因为==比较的是对象的地址,而二者地址不同,故为false</span></span><br><span class="line">str2 == str1;<span class="comment">//false同上</span></span><br><span class="line">  </span><br><span class="line">str2.equals(str1);<span class="comment">//true  String继承Object方法中的equals方法进行重写,内部比较是两个String类型的字符串一个一个字符的比较(下边是源码)</span></span><br><span class="line">str2.eauals(str);<span class="comment">//true同上</span></span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;<span class="comment">//String类中equals源码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>其他类型 “==”和”equals”的比较</p><p>所有的类都继承了Object类,Object类中有一个equals方法,源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>“==”比较的就是引用对象的地址是否相等,而不是比较值,比较值的话就需要重写equals方法</p></li></ul><p>  对于基本数据类型只能用”==”,比较的是两个基本类型的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先说明一下String类型的变量的创建方式&lt;/p&gt;
&lt;p&gt;在创建新的String类型的变量时,首先会在缓冲区查找是否有这个产量对应的对象,有就直接将找到的对象的地址赋给新创建的变量,没有就重新创建一个对象,然后赋给新创建的变量&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
    <category term="Java" scheme="https://qianyoo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qianyoo.github.io/2021/03/03/hello-world/"/>
    <id>https://qianyoo.github.io/2021/03/03/hello-world/</id>
    <published>2021-03-03T08:43:31.754Z</published>
    <updated>2021-03-03T08:15:15.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java实现 Oracle decode函数 转换为 MySQL 可用的 case when</title>
    <link href="https://qianyoo.github.io/2020/12/02/Java%E5%AE%9E%E7%8E%B0%20Oracle%20decode%E5%87%BD%E6%95%B0%20%E8%BD%AC%E6%8D%A2%E4%B8%BA%20MySQL%20%E5%8F%AF%E7%94%A8%E7%9A%84%20case%20when/"/>
    <id>https://qianyoo.github.io/2020/12/02/Java%E5%AE%9E%E7%8E%B0%20Oracle%20decode%E5%87%BD%E6%95%B0%20%E8%BD%AC%E6%8D%A2%E4%B8%BA%20MySQL%20%E5%8F%AF%E7%94%A8%E7%9A%84%20case%20when/</id>
    <published>2020-12-02T07:46:00.000Z</published>
    <updated>2021-03-03T08:15:15.343Z</updated>
    
    <content type="html"><![CDATA[<ul><li>具体实现思路<blockquote><p>首先要确认sql中没有包含decode的字符串或者字段  有的话可以自行替代后再做操作<br>先获取 decode的位置 然后截取出 decode括号内的部分  通过计算左右括号的数量即可截取出来<br>然后再将 decode括号内的部分分为4段  然后拼接回原来的SQL  重复循环执行即可</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decodeTransformToCaseWhen</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将decode的各部分分分别存储  最后拼接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">&quot; ( case &quot;</span> + strings.get(<span class="number">0</span>) + <span class="string">&quot; when &quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> start = sql.indexOf(<span class="string">&quot;decode&quot;</span>) + <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前第一个decode 出现的位置和结束的位置  start是decode之后左括号 ( 起始的位置  ende是 最右边括号 ) 的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = sql.indexOf(<span class="string">&quot;decode&quot;</span>) + <span class="number">6</span>; i &lt; sql.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sql.charAt(i) == <span class="string">&#x27;(&#x27;</span>) left++;</span><br><span class="line">        <span class="keyword">if</span> (sql.charAt(i) == <span class="string">&#x27;)&#x27;</span>) right++;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="number">0</span> &amp;&amp; left == right) &#123;</span><br><span class="line">            end = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  截取出decode括号内的部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String subStr = sql.substring(sql.indexOf(<span class="string">&quot;decode&quot;</span>) + <span class="number">7</span>, end);</span><br><span class="line">    left = <span class="number">0</span>;</span><br><span class="line">    right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end2 = <span class="number">0</span>;<span class="comment">//每一个,切割位置记录   为下一次切割的起始位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subStr.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (subStr.charAt(i) == <span class="string">&#x27;(&#x27;</span>) left++;</span><br><span class="line">        <span class="keyword">if</span> (subStr.charAt(i) == <span class="string">&#x27;)&#x27;</span>) right++;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * i == subStr.length() - 1时 直接截取到最后即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((subStr.charAt(i) == <span class="string">&#x27;,&#x27;</span> &amp;&amp; left == right) || i == subStr.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == subStr.length() - <span class="number">1</span>)</span><br><span class="line">                strings.add(subStr.substring(end2));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                strings.add(subStr.substring(end2, i));</span><br><span class="line">            end2 = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(<span class="string">&quot; ( case &quot;</span>).append(strings.get(<span class="number">0</span>)).append(<span class="string">&quot; when &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strings.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            result.append(strings.get(i)).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == strings.size() - <span class="number">2</span>) &#123;</span><br><span class="line">            result.append(<span class="string">&quot; then &quot;</span>).append(strings.get(i)).append(<span class="string">&quot; else &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.append(<span class="string">&quot; then &quot;</span>).append(strings.get(i)).append(<span class="string">&quot; when &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(strings.get(strings.size() - <span class="number">1</span>)).append(<span class="string">&quot; end ) &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sql.substring(<span class="number">0</span>, start - <span class="number">6</span>) + result + sql.substring(end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用函数及测试用例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select decode(substr(TIME_, 5, 6), 2, 777,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              decode(substr(nvl(B103B,0), 1, 3), 14, 23, (nvl(B103B, 0) - substr(TIME_, 0, 3)) / substr(TIME_, 4, 6))) k,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;       B103B\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;from user_info\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;where TIME_ = &#x27;202004&#x27;&quot;</span>;</span><br><span class="line">    decodeToCaseWhen(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环执行  把全部decode函数都替换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeToCaseWhen</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">    String ss = sql.replaceAll(<span class="string">&quot;nvl&quot;</span>, <span class="string">&quot;isnull&quot;</span>)</span><br><span class="line">            .replaceAll(<span class="string">&quot;NVL&quot;</span>, <span class="string">&quot;isnull&quot;</span>)</span><br><span class="line">            .replaceAll(<span class="string">&quot;DECODE&quot;</span>, <span class="string">&quot;decode&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> s = ss.split(<span class="string">&quot;decode&quot;</span>).length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">        ss = decodeTransformToCaseWhen(ss);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;具体实现思路&lt;blockquote&gt;
&lt;p&gt;首先要确认sql中没有包含decode的字符串或者字段  有的话可以自行替代后再做操作&lt;br&gt;先获取 decode的位置 然后截取出 decode括号内的部分  通过计算左右括号的数量即可截取出来&lt;br&gt;然后再将 de</summary>
      
    
    
    
    
  </entry>
  
</feed>
